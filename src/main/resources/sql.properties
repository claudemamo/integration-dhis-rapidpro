report.success.log.insert.h2=INSERT INTO REPORT_SUCCESS_LOG (dhis_request, dhis_response, rapidpro_payload, data_set_code, report_period_offset, organisation_unit_id) VALUES (:?dhisRequest, :?dhisResponse, :?rapidProPayload, :?dataSetCode, :?reportPeriodOffset, :?orgUnitId)
event.success.log.insert.h2=INSERT INTO EVENT_SUCCESS_LOG (dhis_request, dhis_response, rapidpro_payload, event_id) VALUES (:?dhisRequest, :?dhisResponse, :?rapidProPayload, :?eventId)
last.run.select.h2=SELECT * FROM POLLER WHERE flow_uuid = :?flowUuid
last.run.upsert.h2=MERGE INTO POLLER (flow_uuid, last_run_at) VALUES (:?flowUuid, :?newLastRunAt)

report.success.log.insert.postgresql=INSERT INTO REPORT_SUCCESS_LOG (dhis_request, dhis_response, rapidpro_payload, data_set_code, report_period_offset, organisation_unit_id) VALUES (:?dhisRequest, :?dhisResponse, :?rapidProPayload, :?dataSetCode, :?reportPeriodOffset, :?orgUnitId)
event.success.log.insert.postgresql=INSERT INTO EVENT_SUCCESS_LOG (dhis_request, dhis_response, rapidpro_payload, event_id) VALUES (:?dhisRequest, :?dhisResponse, :?rapidProPayload, :?eventId)
last.run.select.postgresql=SELECT * FROM POLLER WHERE flow_uuid = :?flowUuid
last.run.upsert.postgresql=INSERT INTO POLLER (flow_uuid, last_run_at) VALUES (:?flowUuid, :?newLastRunAt) ON CONFLICT (flow_uuid) DO UPDATE SET last_run_at = :?newLastRunAt

message.store.insert.postgresql=INSERT INTO MESSAGE_STORE (key_, headers, body, context) VALUES (:?key, :?headers, :?body, :?context)
message.store.select.postgresql=SELECT * FROM MESSAGE_STORE WHERE key_ LIKE :?key
message.store.select.range.postgresql=SELECT * FROM MESSAGE_STORE WHERE key_ LIKE :?key OFFSET :?offset ROWS FETCH FIRST :?limit ROWS ONLY
message.store.delete.postgresql=DELETE FROM MESSAGE_STORE WHERE key_ LIKE :?key RETURNING *
message.store.move.postgresql=WITH OLD AS (SELECT * FROM MESSAGE_STORE WHERE key_ = :?oldKey) UPDATE MESSAGE_STORE SET key_ = :?newKey WHERE key_ = :?oldKey RETURNING *, (SELECT key_ FROM OLD);
